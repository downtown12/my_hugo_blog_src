<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on FgetDaPain</title>
    <link>https://fgetdapain.github.io/post/</link>
    <description>Recent content in Posts on FgetDaPain</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 10 May 2018 21:20:34 +0800</lastBuildDate>
    
	<atom:link href="https://fgetdapain.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>银行业的漏洞生命周期管理流程</title>
      <link>https://fgetdapain.github.io/post/management-of-vulnerability-lifetime-in-a-bank/</link>
      <pubDate>Thu, 10 May 2018 21:20:34 +0800</pubDate>
      
      <guid>https://fgetdapain.github.io/post/management-of-vulnerability-lifetime-in-a-bank/</guid>
      <description>在甲方单位从事了将近两年的漏洞生命周期管理工作，所在的银行没有SRC(应急响应中心)，每个季度会有一次测试项目，测试项目是外包给了测试厂商来做，测试厂商测试完后，将每个系统的漏洞报告，打成一个包，发给我。此时，我的工作就开始了，我要将漏洞通知给负责各系统开发的项目经理，帮助和指导他们修复漏洞。漏洞是以工单的形式通知给开发项目经理的。我们的工单系统其实就类似一个SRC,但是远没有SRC那么好用。
现在将我的漏洞生命周期管理工作总结如下，用红色字体标注了此管理流程中常见的一些难点。作为我这两年从事这项工作的一些总结。
为了这个项目，我还开发了一个自动批量派发工单给开发负责人的脚本，来提高漏洞处置效率。我给它起名为xxxxx-worksheet-robot(xxxxx是我们工单系统的名称，这里隐去)</description>
    </item>
    
    <item>
      <title>初探：Python Celery任务调度模块和消息队列</title>
      <link>https://fgetdapain.github.io/post/first-exploration-of-celery-and-message-queue/</link>
      <pubDate>Thu, 10 May 2018 20:14:36 +0800</pubDate>
      
      <guid>https://fgetdapain.github.io/post/first-exploration-of-celery-and-message-queue/</guid>
      <description>近期由于工作需要，要开发一套类似扫描器的工具，并将它的扫描工作作为服务提供给多个用户使用。每个用户可以下发扫描任务，最终查看扫描结果。为了实现调度多个用户下发的扫描任务。我想到需要写一个同步或异步的任务调度模块，并要将用户下发的任务放进队列里，依次（同步）或并发（异步）处理。同时，队列里的任务要存放在缓存（或本地磁盘）中，以免任务信息丢失。 &amp;gt;为了实现这几个功能，上网查了些资料，发现消息队列技术刚好可以完成这项工作。因此也就不需要自己研发这个模块了。刚好前不久也被lijiejie大牛问到了类似的问题。之前没有接触过。正好学了一下，发现使用现成的任务调度模块（Celery）以及消息队列（RabbitMQ或Redis）来实现文章一开始所说的任务调度功能，其实很简单。
参考连接  任务调度利器：Celery (廖雪峰) 利用 Celery 构建 Web 服务的后台任务调度模块(ibm-developworks)  Celery是什么  Celery是Python开发的分布式任务调度模块，接口简单，开发容易 Celery本身不含消息服务，它使用第三方消息服务来传递任务，目前，Celery支持的消息服务有RabbitMQ、Redis甚至是数据库。
 对与我目前需求比较简单的情况，当然Redis应该是最佳选择。后续随着需求复杂，可以考虑使用RabbitMQ（分布式集群的消息队列）
前边几段提到了RabbitMQ和Redis, 这两个东西在任务调度里的作用是什么呢？ 答案是，他们提供了消息队列服务。 简单来讲，它提供了任务存放的位置和存取方式。这样，在任务处理模块有空闲的时候，就从队列里取出一个任务来执行，执行完了（或中场休息）再取出另外一个。 消息队列在任务下发者（生产者）和任务处理者（消费者）之间提供了沟通的桥梁。
消息队列的三个重要组件  Producer（客户端） Broker（中间人） Worker（职程）  消息队列的输入是工作的一个单元，称为任务，独立的职程（Worker）进程持续监视队列中是否有需要处理的新任务。 Celery 用消息通信，通常使用中间人（Broker）在客户端和职程间斡旋。这个过程从客户端向队列添加消息开始，之后中间人把消息派送给职程。
Broker的选择：Redis还是RabbitMQ 简单描述如下：
Redis属轻量级消息队列，支持功能不多，不支持持久化任务。
RabbitMQ属重量级消息队列，支持持久化任务。</description>
    </item>
    
    <item>
      <title>我是如何用Hugo搭建这个个人博客的</title>
      <link>https://fgetdapain.github.io/post/how-to-build-this-personal-blog-using-hugo/</link>
      <pubDate>Sat, 05 May 2018 11:40:56 +0800</pubDate>
      
      <guid>https://fgetdapain.github.io/post/how-to-build-this-personal-blog-using-hugo/</guid>
      <description>参考链接：  使用hugo搭建个人博客站点; Hugo Mainroad 主题; Hugo Docs;  Hugo是啥  Hugo是一个用Go语言编写的静态网站生成器 Hugo很适合用来搭建个人博客，且它的官方网站上有很多的博客主题，可以下载直接使用
 静态网站生成器 这里直接摘抄CoderZh大牛对于静态网站生成器的说明：
 什么是静态网站生成器？如果追溯到最早的网站形式，那时候的网页都是静态的，即一个内容不变的html文件放在服务器上，人们通过互联网访问浏览的都是这个一成不变的页面。后来，人们发现，需要和网页进行交互，能根据用户的输入动态呈现出相应的内容，这就是动态网站。那，为什么现在又回归使用静态网站呢？特别是对于博客网站这种特殊的形式。我的理解是：
访问速度提升。静态页面不需要像动态页面那样经常去查询数据库，而是直接将最终页面内容返回。 搜素引擎友好。便于搜索引擎索引，比如很多动态网站的页面地址是一样的，只是后面传入的参数不一样，容易让搜索引擎误认为是同一个页面。（虽然不会） 可以完全抛弃数据库，减少复杂度，将最复杂的一步交给静态网站生成器，自己只专注写作、生成、发布三个步骤。 博客文章可以以文本文件的方式（MarkDown）在本地维护管理，不需要像之前那样在网页的编辑器里提交到网站数据库。你可以方便的使用github管理你的博客文章，不会丢失，又能追溯到每一次的内容变更。 目前最流行的静态网站生成器是Jekyll，它是github创始人自己实现的一套ruby的静态网站生成器。一经推出，各个程序哥竞相效仿，一时间使用Jekyll搭建自己的博客变成了一件很高逼格的事情。
 为什么不用MVC架构来搭建博客 一开始我是打算用MVC架构搭建博客的,但是有一个痛点让我无法这样做：我需要很快搭起一个博客（大概1-2天时间），如果我用Python自己开发前后端，后端还好，但前端和数据库表结构设计目前我是不擅长的，这可能需要花掉我一个月的时间，且最终我也不能保证它能搭得很好。 且我目前的需求只是需要别人能看到我发布的内容（主要是技术随笔）即可。暂时不需要评论这些复杂的需求。这样一来，带有数据库的博客系统对我来说，就过于臃肿了。我也可以采用现成的Wordpress，很快部署好这种博客，但我不想这么做（主要还是对Wordpress的安全状况不信任）。 Hugo以前我也听说过，但当时我不知道他具体是什么，直到我真的要开始做这件事。开始研究网上大家推荐的各类博客的特性时，我觉得Hugo还不错，能满足我的需求，且没有数据库使他能很快地响应。我喜欢简单的东西。这些构成了我选择它的理由。
Hugo以外的一些其它的静态网站生成器  Jekyll: ruby写的； Hexo: Node.js写的； Pelican: Python写的，使用Jinja2渲染模版； &amp;hellip;  搭建步骤  首先安装好Hugo。Hugo仅仅由一个二进制文件构成，可以在官网下载它的二进制包（我用的Ubuntu上是deb），然后用软件包管理器安装即可。 使用hugo new site yoursitename 命令，在当前目录下，新建一个博客网站目录，把yoursitename改为你喜欢的名字。 下载一个能用的主题（为什么说是“能用的”，下边会解释） 用md写博客。 最后在VPS上部署你的博客，大功告成。  搭建步骤其实很简单，但是中间会遇到很多坑，主要是在使用下载好的主题（theme）时，外国人开发的主题有时会加载很多Google的东西，例如统计功能和字体，这时我们的博客页面就很容易无法完全加载（墙的原因），导致页面会很难看。
主题theme选型是个坑： 主要是因为墙的原因，如果所选用的主题里包含了google analytics或者来自googleapis的css样式文件，就会出现页面无法加载的问题
我遇到的主要是加载字体文件时，字体文件来自于googleapis.com，这时需要翻墙将字体文件下载到本地，再从本地加载字体样式才行。</description>
    </item>
    
  </channel>
</rss>